# -*- coding: utf-8 -*-
"""geopandasCorERaca.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11qSGen-YCIvh8cMPeuJzxeYdInLHSoHN
"""

import geopandas as gpd
import pandas as pd
import folium
from folium import Choropleth
import ipywidgets as widgets
from ipywidgets import interactive
from IPython.display import display, clear_output

br_estados = gpd.read_file("BR_UF_2024.shp")

candidatoscer24 = pd.read_csv("regiaocer24.csv", sep= ';', encoding= 'latin1', low_memory=False)
candidatoscer24eleito = pd.read_csv("regiaocer24eleito.csv", sep= ';', encoding= 'latin1', low_memory=False)
candidatoscer20 = pd.read_csv("regiaocer20.csv", sep= ';', encoding= 'latin1', low_memory=False)
candidatoscer20eleito = pd.read_csv("regiaocer20eleito.csv", sep= ';', encoding= 'latin1', low_memory=False)
candidatoscer16 = pd.read_csv("regiaocer16.csv", sep= ';', encoding= 'latin1', low_memory=False)
candidatoscer16eleito = pd.read_csv("regiaocer16eleito.csv", sep= ';', encoding= 'latin1', low_memory=False)

candidatoscer24['Porcentagem'] = pd.to_numeric(candidatoscer24["Porcentagem"].astype(str).str.replace(",", ".", regex=False), errors="coerce") * 100
preta24 = candidatoscer24[candidatoscer24['Cor/raça'].str.contains("Preta")]

candidatoscer24eleito['Porcentagem'] = pd.to_numeric(candidatoscer24eleito["Porcentagem"].astype(str).str.replace(",", ".", regex=False), errors="coerce") * 100
preta24eleito = candidatoscer24eleito[candidatoscer24eleito['Cor/raça'].str.contains("Preta")]

parda24 = candidatoscer24[candidatoscer24['Cor/raça'].str.contains("Parda")]

parda24eleito = candidatoscer24eleito[candidatoscer24eleito['Cor/raça'].str.contains("Parda")]
parda24eleito

candidatoscer20['Porcentagem'] = pd.to_numeric(candidatoscer20["Porcentagem"].astype(str).str.replace(",", ".", regex=False), errors="coerce") * 100
preta20 = candidatoscer20[candidatoscer20['Cor/raça'].str.contains("Preta")]

candidatoscer20eleito['Porcentagem'] = pd.to_numeric(candidatoscer20eleito["Porcentagem"].astype(str).str.replace(",", ".", regex=False), errors="coerce") * 100
preta20eleito = candidatoscer20eleito[candidatoscer20eleito['Cor/raça'].str.contains("Preta")]

parda20 = candidatoscer20[candidatoscer20['Cor/raça'].str.contains("Parda")]

parda20eleito = candidatoscer20eleito[candidatoscer20eleito['Cor/raça'].str.contains("Parda")]

candidatoscer16['Porcentagem'] = pd.to_numeric(candidatoscer16["Porcentagem"].astype(str).str.replace(",", ".", regex=False), errors="coerce") * 100
preta16 = candidatoscer16[candidatoscer16['Cor/raça'].str.contains("Preta")]

candidatoscer16eleito['Porcentagem'] = pd.to_numeric(candidatoscer16eleito["Porcentagem"].astype(str).str.replace(",", ".", regex=False), errors="coerce") * 100
preta16eleito = candidatoscer16eleito[candidatoscer16eleito['Cor/raça'].str.contains("Preta")]

parda16 = candidatoscer16[candidatoscer16['Cor/raça'].str.contains("Parda")]

parda16eleito = candidatoscer16eleito[candidatoscer16eleito['Cor/raça'].str.contains("Parda")]

slider_ano = widgets.IntSlider(value=2016, min=2016, max=2024, step=4, description="Ano:")
dropdown_analise = widgets.Dropdown(options=["Preto", "Pardo"], description="Análise:")
checkboxesEleito = widgets.Checkbox(value=False, description="Eleito")

output = widgets.Output()

def busca_func(change):
    with output:
        clear_output()
        ano = str(slider_ano.value)
        analise = dropdown_analise.value

        if ano == "2016":
            if analise == "Preto" and checkboxesEleito.value == False:
              mapaPreta16 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
              folium.Choropleth(
                  geo_data=br_estados,
                  name="choropleth",
                  data=preta16,
                  columns=["UF", "Porcentagem"],
                  key_on="feature.properties.SIGLA_UF",
                  fill_color="Oranges",
                  fill_opacity=0.7,
                  line_opacity=0.2,
                  legend_name="Candidatos pretos por estado 2016 (%)",
              ).add_to(mapaPreta16)
              display(mapaPreta16)
            elif analise == "Preto" and checkboxesEleito.value != False:
              mapaPreta16eleito = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
              folium.Choropleth(
                  geo_data=br_estados,
                  name="choropleth",
                  data=preta16eleito,
                  columns=["UF", "Porcentagem"],
                  key_on="feature.properties.SIGLA_UF",
                  fill_color="Oranges",
                  fill_opacity=0.7,
                  line_opacity=0.2,
                  legend_name="Candidatos pretos por estado eleitos 2016 (%)",
              ).add_to(mapaPreta16eleito)
              display(mapaPreta16eleito)
            elif analise == "Pardo" and checkboxesEleito.value == False:
              mapaParda16 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
              folium.Choropleth(
                  geo_data=br_estados,
                  name="choropleth",
                  data=parda16,
                  columns=["UF", "Porcentagem"],
                  key_on="feature.properties.SIGLA_UF",
                  fill_color="Reds",
                  fill_opacity=0.7,
                  line_opacity=0.2,
                  legend_name="Candidatos pardos por estado 2016 (%)",
              ).add_to(mapaParda16)
              display(mapaParda16)
            elif analise == "Pardo" and checkboxesEleito.value != False:
              mapaParda16eleito = folium.Map(location=[-15.78897, -47.879873], zoom_start=4)
              folium.Choropleth(
                    geo_data=br_estados,
                    name="choropleth",
                    data=parda16eleito,
                    columns=["UF", "Porcentagem"],
                    key_on="feature.properties.SIGLA_UF",
                    fill_color="Reds",
                    fill_opacity=0.7,
                    line_opacity=0.2,
                    legend_name="Candidatos pardos por estado eleitos 2016 (%)",
              ).add_to(mapaParda16eleito)
              display(mapaParda16eleito)
        elif ano == "2020":
            if analise == "Preto" and checkboxesEleito.value == False:
              mapaPreta20 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
              folium.Choropleth(
                  geo_data=br_estados,
                  name="choropleth",
                  data=preta20,
                  columns=["UF", "Porcentagem"],
                  key_on="feature.properties.SIGLA_UF",
                  fill_color="Oranges",
                  fill_opacity=0.7,
                  line_opacity=0.2,
                  legend_name="Candidatos pretos por estado 2020 (%)",
              ).add_to(mapaPreta20)
              display(mapaPreta20)
            elif analise == "Preto" and checkboxesEleito.value != False:
              mapaPreta20eleito = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
              folium.Choropleth(
                  geo_data=br_estados,
                  name="choropleth",
                  data=preta20eleito,
                  columns=["UF", "Porcentagem"],
                  key_on="feature.properties.SIGLA_UF",
                  fill_color="Oranges",
                  fill_opacity=0.7,
                  line_opacity=0.2,
                  legend_name="Candidatos pretos por estado eleitos 2020 (%)",
              ).add_to(mapaPreta20eleito)
              display(mapaPreta20eleito)
            elif analise == "Pardo" and checkboxesEleito.value == False:
              mapaParda20 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
              folium.Choropleth(
                  geo_data=br_estados,
                  name="choropleth",
                  data=parda20,
                  columns=["UF", "Porcentagem"],
                  key_on="feature.properties.SIGLA_UF",
                  fill_color="Reds",
                  fill_opacity=0.7,
                  line_opacity=0.2,
                  legend_name="Candidatos pardos por estado 2020 (%)",
              ).add_to(mapaParda20)
              display(mapaParda20)
            elif analise == "Pardo" and checkboxesEleito.value != False:
               mapaParda20eleito = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
               folium.Choropleth(
                  geo_data=br_estados,
                  name="choropleth",
                  data=parda20eleito,
                  columns=["UF", "Porcentagem"],
                  key_on="feature.properties.SIGLA_UF",
                  fill_color="Reds",
                  fill_opacity=0.7,
                  line_opacity=0.2,
                  legend_name="Candidatos pardos por estado eleitos 2020 (%)",
               ).add_to(mapaParda20eleito)
               display(mapaParda20eleito)
        elif ano == "2024":
            if analise == "Preto" and checkboxesEleito.value == False:
              mapaPreta24 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
              folium.Choropleth(
                  geo_data=br_estados,
                  name="choropleth",
                  data=preta24,
                  columns=["UF", "Porcentagem"],
                  key_on="feature.properties.SIGLA_UF",
                  fill_color="Oranges",
                  fill_opacity=0.7,
                  line_opacity=0.2,
                  legend_name="Candidatos pretos por estado 2024 (%)",
              ).add_to(mapaPreta24)
              display(mapaPreta24)
            elif analise == "Preto" and checkboxesEleito.value != False:
               mapaPreta24eleito = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
               folium.Choropleth(
                  geo_data=br_estados,
                  name="choropleth",
                  data=preta24eleito,
                  columns=["UF", "Porcentagem"],
                  key_on="feature.properties.SIGLA_UF",
                  fill_color="Oranges",
                  fill_opacity=0.7,
                  line_opacity=0.2,
                  legend_name="Candidatos pretos por estado eleitos 2024 (%)",
               ).add_to(mapaPreta24eleito)
               display(mapaPreta24eleito)
            elif analise == "Pardo" and checkboxesEleito.value == False:
               mapaParda24 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
               folium.Choropleth(
                  geo_data=br_estados,
                  name="choropleth",
                  data=parda24,
                  columns=["UF", "Porcentagem"],
                  key_on="feature.properties.SIGLA_UF",
                  fill_color="Reds",
                  fill_opacity=0.7,
                  line_opacity=0.2,
                  legend_name="Candidatos pardos por estado 2024 (%)",
              ).add_to(mapaParda24)
               display(mapaParda24)
            elif analise == "Pardo" and checkboxesEleito.value != False:
              mapaParda24eleito = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
              folium.Choropleth(
                  geo_data=br_estados,
                  name="choropleth",
                  data=parda24eleito,
                  columns=["UF", "Porcentagem"],
                  key_on="feature.properties.SIGLA_UF",
                  fill_color="Reds",
                  fill_opacity=0.7,
                  line_opacity=0.2,
                  legend_name="Candidatos pardos por estado eleitos 2024 (%)",
              ).add_to(mapaParda24eleito)
              display(mapaParda24eleito)

slider_ano.observe(busca_func, names='value')
dropdown_analise.observe(busca_func, names='value')
checkboxesEleito.observe(busca_func, names='value')

display(slider_ano, dropdown_analise, checkboxesEleito)
display(output)

busca_func(None)
# -*- coding: utf-8 -*-
"""AnalisesBrasil.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Eb8VUmE-OTgzjVuBPjalMdnkJYIe_AcC
"""

import geopandas as gpd
import pandas as pd
import folium
from folium import Choropleth
import ipywidgets as widgets
from ipywidgets import interactive
from IPython.display import display, clear_output

br_estados = gpd.read_file("BR_UF_2024.shp")

censo00AnosEstudo = pd.read_csv("Censo 2000 - Anos de estudo.csv", sep= ';', encoding= 'utf-8', low_memory=False)
censo00CorERaca = pd.read_csv("Censo 2000 - Cor e Raça.csv", sep= ';', encoding= 'utf-8', low_memory=False)
censo00Genero = pd.read_excel("Censo 2000 - Gênero.xlsx")
censo10Instrucao = pd.read_csv("Censo 2010 - Instrução.csv", sep= ';', encoding= 'utf-8', low_memory=False)
censo10CorERaca = pd.read_csv("Censo 2010 - Cor e Raça.csv", sep= ';', encoding= 'utf-8', low_memory=False)
censo10Genero = pd.read_csv("Censo 2010 - Gênero.csv", sep= ';', encoding= 'utf-8', low_memory=False)
censo22Instrucao = pd.read_csv("Censo 2022 - Instrução.csv", sep= ';', encoding= 'utf-8', low_memory=False)
censo22CorERaca = pd.read_csv("Censo 2022 - Cor e Raça.csv", sep= ';', encoding= 'utf-8', low_memory=False)
censo22Genero = pd.read_csv("Censo 2022 - Gênero.csv", sep= ';', encoding= 'utf-8', low_memory=False)

censo22CorERaca["Porcentagem"] = censo22CorERaca["Total"] / censo22CorERaca[censo22CorERaca["Cor ou raça"] == "Total"].set_index("Unidade da Federação")["Total"].reindex(censo22CorERaca["Unidade da Federação"]).values * 100

preta22 = censo22CorERaca[censo22CorERaca['Cor ou raça'].str.contains("Preta")]
parda22 = censo22CorERaca[censo22CorERaca['Cor ou raça'].str.contains("Parda")]

censo00CorERaca['PretaPorcentagem'] = (censo00CorERaca['Preta'] / censo00CorERaca['Total']) * 100
censo00CorERaca['PardaPorcentagem'] = (censo00CorERaca['Parda'] / censo00CorERaca['Total']) * 100
censo10CorERaca['PretaPorcentagem'] = (censo10CorERaca['Preta'] / censo10CorERaca['Total']) * 100
censo10CorERaca['PardaPorcentagem'] = (censo10CorERaca['Parda'] / censo10CorERaca['Total']) * 100

radio_ano = widgets.RadioButtons(options=['2000', '2010', '2022'], description='Ano:', disabled=False)
dropdown_analise = widgets.Dropdown(options=["Preto", "Pardo"], description="Análise:")

output = widgets.Output()

def busca_func(change):
    with output:
        clear_output()
        ano = str(radio_ano.value)
        analise = dropdown_analise.value

        if ano == "2000":
            if analise == "Preto":
              mapaPreta00 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
              folium.Choropleth(
                geo_data=br_estados,
                name="choropleth",
                data=censo00CorERaca,
                columns=["Unidade da Federação", "PretaPorcentagem"],
                key_on="feature.properties.NM_UF",
                fill_color="Oranges",
                fill_opacity=0.7,
                line_opacity=0.2,
                legend_name="População pretos por estado 2000 (%)",
              ).add_to(mapaPreta00)
              display(mapaPreta00)
            elif analise == "Pardo":
              mapaParda00 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
              folium.Choropleth(
                  geo_data=br_estados,
                  name="choropleth",
                  data=censo00CorERaca,
                  columns=["Unidade da Federação", "PardaPorcentagem"],
                  key_on="feature.properties.NM_UF",
                  fill_color="Reds",
                  fill_opacity=0.7,
                  line_opacity=0.2,
                  legend_name="População pardos por estado 2000 (%)",
              ).add_to(mapaParda00)
              display(mapaParda00)
        elif ano == "2010":
            if analise == "Preto":
              mapaPreta10 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
              folium.Choropleth(
                  geo_data=br_estados,
                  name="choropleth",
                  data=censo10CorERaca,
                  columns=["Unidade da Federação", "PretaPorcentagem"],
                  key_on="feature.properties.NM_UF",
                  fill_color="Oranges",
                  fill_opacity=0.7,
                  line_opacity=0.2,
                  legend_name="População pretos por estado 2010 (%)",
              ).add_to(mapaPreta10)
              display(mapaPreta10)
            elif analise == "Pardo":
              mapaParda10 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
              folium.Choropleth(
                  geo_data=br_estados,
                  name="choropleth",
                  data=censo10CorERaca,
                  columns=["Unidade da Federação", "PardaPorcentagem"],
                  key_on="feature.properties.NM_UF",
                  fill_color="Reds",
                  fill_opacity=0.7,
                  line_opacity=0.2,
                  legend_name="População pardos por estado 2010 (%)",
              ).add_to(mapaParda10)
              display(mapaParda10)
        elif ano == "2022":
            if analise == "Preto":
              mapaPreta22 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
              folium.Choropleth(
                  geo_data=br_estados,
                  name="choropleth",
                  data=preta22,
                  columns=["Unidade da Federação", "Porcentagem"],
                  key_on="feature.properties.NM_UF",
                  fill_color="Oranges",
                  fill_opacity=0.7,
                  line_opacity=0.2,
                  legend_name="População pretos por estado 2022 (%)",
              ).add_to(mapaPreta22)
              display(mapaPreta22)
            elif analise == "Pardo":
               mapaParda22 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
               folium.Choropleth(
                  geo_data=br_estados,
                  name="choropleth",
                  data=parda22,
                  columns=["Unidade da Federação", "Porcentagem"],
                  key_on="feature.properties.NM_UF",
                  fill_color="Reds",
                  fill_opacity=0.7,
                  line_opacity=0.2,
                  legend_name="População pardos por estado 2022 (%)",
              ).add_to(mapaParda22)
               display(mapaParda22)

radio_ano.observe(busca_func, names='value')
dropdown_analise.observe(busca_func, names='value')

display(radio_ano, dropdown_analise)
display(output)

busca_func(None)

censo22Genero["Porcentagem"] = censo22Genero["Total"] / censo22Genero[censo22Genero["Sexo"] == "Total"].set_index("Unidade da Federação")["Total"].reindex(censo22Genero["Unidade da Federação"]).values * 100

mulher22 = censo22Genero[censo22Genero['Sexo'].str.contains("Mulheres")]
homem22 = censo22Genero[censo22Genero['Sexo'].str.contains("Homens")]

censo00Genero['MulherPorcentagem'] = (censo00Genero['Mulher'] / censo00Genero['Total']) * 100
censo00Genero['HomemPorcentagem'] = (censo00Genero['Homem'] / censo00Genero['Total']) * 100
censo10Genero['MulherPorcentagem'] = (censo10Genero['Mulheres'] / censo10Genero['Total']) * 100
censo10Genero['HomemPorcentagem'] = (censo10Genero['Homens'] / censo10Genero['Total']) * 100

radio_ano = widgets.RadioButtons(options=['2000', '2010', '2022'], description='Ano:', disabled=False)
dropdown_analise = widgets.Dropdown(options=["Homem", "Mulher"], description="Análise:")

output = widgets.Output()

def busca_func(change):
    with output:
        clear_output()
        ano = str(radio_ano.value)
        analise = dropdown_analise.value

        if ano == "2000":
            if analise == "Homem":
              mapaHomem00 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
              folium.Choropleth(
                geo_data=br_estados,
                name="choropleth",
                data=censo00Genero,
                columns=["Unidade da Federação", "HomemPorcentagem"],
                key_on="feature.properties.NM_UF",
                fill_color="Oranges",
                fill_opacity=0.7,
                line_opacity=0.2,
                legend_name="População de homens por estado 2000 (%)",
              ).add_to(mapaHomem00)
              display(mapaHomem00)
            elif analise == "Mulher":
              mapaMulher00 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
              folium.Choropleth(
                  geo_data=br_estados,
                  name="choropleth",
                  data=censo00Genero,
                  columns=["Unidade da Federação", "MulherPorcentagem"],
                  key_on="feature.properties.NM_UF",
                  fill_color="Reds",
                  fill_opacity=0.7,
                  line_opacity=0.2,
                  legend_name="População de mulheres por estado 2000 (%)",
              ).add_to(mapaMulher00)
              display(mapaMulher00)
        elif ano == "2010":
            if analise == "Homem":
              mapaHomem10 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
              folium.Choropleth(
                  geo_data=br_estados,
                  name="choropleth",
                  data=censo10Genero,
                  columns=["Unidade da Federação", "HomemPorcentagem"],
                  key_on="feature.properties.NM_UF",
                  fill_color="Oranges",
                  fill_opacity=0.7,
                  line_opacity=0.2,
                  legend_name="População de homens por estado 2010 (%)",
              ).add_to(mapaHomem10)
              display(mapaHomem10)
            elif analise == "Mulher":
              mapaMulher10 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
              folium.Choropleth(
                  geo_data=br_estados,
                  name="choropleth",
                  data=censo10Genero,
                  columns=["Unidade da Federação", "MulherPorcentagem"],
                  key_on="feature.properties.NM_UF",
                  fill_color="Reds",
                  fill_opacity=0.7,
                  line_opacity=0.2,
                  legend_name="População de mulheres por estado 2010 (%)",
              ).add_to(mapaMulher10)
              display(mapaMulher10)
        elif ano == "2022":
            if analise == "Homem":
              mapaHomem22 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
              folium.Choropleth(
                  geo_data=br_estados,
                  name="choropleth",
                  data=homem22,
                  columns=["Unidade da Federação", "Porcentagem"],
                  key_on="feature.properties.NM_UF",
                  fill_color="Oranges",
                  fill_opacity=0.7,
                  line_opacity=0.2,
                  legend_name="População de homens por estado 2022 (%)",
              ).add_to(mapaHomem22)
              display(mapaHomem22)
            elif analise == "Mulher":
               mapaMulher22 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
               folium.Choropleth(
                  geo_data=br_estados,
                  name="choropleth",
                  data=mulher22,
                  columns=["Unidade da Federação", "Porcentagem"],
                  key_on="feature.properties.NM_UF",
                  fill_color="Reds",
                  fill_opacity=0.7,
                  line_opacity=0.2,
                  legend_name="População de mulheres por estado 2022 (%)",
              ).add_to(mapaMulher22)
               display(mapaMulher22)

radio_ano.observe(busca_func, names='value')
dropdown_analise.observe(busca_func, names='value')

display(radio_ano, dropdown_analise)
display(output)

busca_func(None)

censo22Instrucao['SemInstruçãoEFundamentalIncompletoPorcentagem'] = (censo22Instrucao['Sem instrução e fundamental incompleto'] / censo22Instrucao['Total']) * 100
censo22Instrucao['FundamentalCompletoEMédioIncompletoPorcentagem'] = (censo22Instrucao['Fundamental completo e médio incompleto'] / censo22Instrucao['Total']) * 100
censo22Instrucao['MédioCompletoESuperiorIncompletoPorcentagem'] = (censo22Instrucao['Médio completo e superior incompleto'] / censo22Instrucao['Total']) * 100
censo22Instrucao['SuperiorCompletoPorcentagem'] = (censo22Instrucao['Superior completo'] / censo22Instrucao['Total']) * 100

dropdownInstrucao = widgets.Dropdown(options=['Sem instrução e fundamental incompleto', 'Fundamental completo e médio incompleto', 'Médio completo e superior incompleto', 'Superior completo'], description="Grau de instrução:")

output = widgets.Output()

def busca_func(change):
    with output:
        clear_output()
        instrucao = dropdownInstrucao.value

        if instrucao == "Sem instrução e fundamental incompleto":
          mapaSIFI22 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
          folium.Choropleth(
              geo_data=br_estados,
              name="choropleth",
              data=censo22Instrucao,
              columns=["Unidade da Federação", "SemInstruçãoEFundamentalIncompletoPorcentagem"],
              key_on="feature.properties.NM_UF",
              fill_color="Reds",
              fill_opacity=0.7,
              line_opacity=0.2,
              legend_name="População sem instrução e fundamental incompleto em 2022 (%)",
          ).add_to(mapaSIFI22)
          display(mapaSIFI22)
        elif instrucao == "Fundamental completo e médio incompleto":
          mapaFCMI22 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
          folium.Choropleth(
              geo_data=br_estados,
              name="choropleth",
              data=censo22Instrucao,
              columns=["Unidade da Federação", "FundamentalCompletoEMédioIncompletoPorcentagem"],
              key_on="feature.properties.NM_UF",
              fill_color="Reds",
              fill_opacity=0.7,
              line_opacity=0.2,
              legend_name="População com Fundamental completo e médio incompleto em 2022 (%)",
          ).add_to(mapaFCMI22)
          display(mapaFCMI22)
        elif instrucao == "Médio completo e superior incompleto":
          mapaMCSI22 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
          folium.Choropleth(
              geo_data=br_estados,
              name="choropleth",
              data=censo22Instrucao,
              columns=["Unidade da Federação", "MédioCompletoESuperiorIncompletoPorcentagem"],
              key_on="feature.properties.NM_UF",
              fill_color="Reds",
              fill_opacity=0.7,
              line_opacity=0.2,
              legend_name="População com Médio completo e superior incompleto em 2022 (%)",
          ).add_to(mapaMCSI22)
          display(mapaMCSI22)
        elif instrucao == "Superior completo":
          mapaSC22 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
          folium.Choropleth(
              geo_data=br_estados,
              name="choropleth",
              data=censo22Instrucao,
              columns=["Unidade da Federação", "SuperiorCompletoPorcentagem"],
              key_on="feature.properties.NM_UF",
              fill_color="Reds",
              fill_opacity=0.7,
              line_opacity=0.2,
              legend_name="População com Superior completo em 2022 (%)",
          ).add_to(mapaSC22)
          display(mapaSC22)


dropdownInstrucao.observe(busca_func, names='value')

display(dropdownInstrucao)
display(output)

busca_func(None)

censo10Instrucao['SemInstruçãoEFundamentalIncompletoPorcentagem'] = (censo10Instrucao['Sem instrução e fundamental incompleto'] / censo10Instrucao['Total']) * 100
censo10Instrucao['FundamentalCompletoEMédioIncompletoPorcentagem'] = (censo10Instrucao['Fundamental completo e médio incompleto'] / censo10Instrucao['Total']) * 100
censo10Instrucao['MédioCompletoESuperiorIncompletoPorcentagem'] = (censo10Instrucao['Médio completo e superior incompleto'] / censo10Instrucao['Total']) * 100
censo10Instrucao['SuperiorCompletoPorcentagem'] = (censo10Instrucao['Superior completo'] / censo10Instrucao['Total']) * 100

dropdownInstrucao = widgets.Dropdown(options=['Sem instrução e fundamental incompleto', 'Fundamental completo e médio incompleto', 'Médio completo e superior incompleto', 'Superior completo'], description="Grau de instrução:")

output = widgets.Output()

def busca_func(change):
    with output:
        clear_output()
        instrucao = dropdownInstrucao.value

        if instrucao == "Sem instrução e fundamental incompleto":
          mapaSIFI10 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
          folium.Choropleth(
              geo_data=br_estados,
              name="choropleth",
              data=censo10Instrucao,
              columns=["Unidade da Federação", "SemInstruçãoEFundamentalIncompletoPorcentagem"],
              key_on="feature.properties.NM_UF",
              fill_color="Reds",
              fill_opacity=0.7,
              line_opacity=0.2,
              legend_name="População sem instrução e fundamental incompleto em 2010 (%)",
          ).add_to(mapaSIFI10)
          display(mapaSIFI10)
        elif instrucao == "Fundamental completo e médio incompleto":
          mapaFCMI10 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
          folium.Choropleth(
              geo_data=br_estados,
              name="choropleth",
              data=censo10Instrucao,
              columns=["Unidade da Federação", "FundamentalCompletoEMédioIncompletoPorcentagem"],
              key_on="feature.properties.NM_UF",
              fill_color="Reds",
              fill_opacity=0.7,
              line_opacity=0.2,
              legend_name="População com Fundamental completo e médio incompleto em 2010 (%)",
          ).add_to(mapaFCMI10)
          display(mapaFCMI10)
        elif instrucao == "Médio completo e superior incompleto":
          mapaMCSI10 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
          folium.Choropleth(
              geo_data=br_estados,
              name="choropleth",
              data=censo10Instrucao,
              columns=["Unidade da Federação", "MédioCompletoESuperiorIncompletoPorcentagem"],
              key_on="feature.properties.NM_UF",
              fill_color="Reds",
              fill_opacity=0.7,
              line_opacity=0.2,
              legend_name="População com Médio completo e superior incompleto em 2010 (%)",
          ).add_to(mapaMCSI10)
          display(mapaMCSI10)
        elif instrucao == "Superior completo":
          mapaSC10 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
          folium.Choropleth(
              geo_data=br_estados,
              name="choropleth",
              data=censo10Instrucao,
              columns=["Unidade da Federação", "SuperiorCompletoPorcentagem"],
              key_on="feature.properties.NM_UF",
              fill_color="Reds",
              fill_opacity=0.7,
              line_opacity=0.2,
              legend_name="População com Superior completo em 2010 (%)",
          ).add_to(mapaSC10)
          display(mapaSC10)


dropdownInstrucao.observe(busca_func, names='value')

display(dropdownInstrucao)
display(output)

busca_func(None)

censo00AnosEstudo['SemInstruçãoEmenosDe1AnoPorcentagem'] = (censo00AnosEstudo['Sem instrução e menos de 1 ano'] / censo00AnosEstudo['Total']) * 100
censo00AnosEstudo['1a3AnosPorcentagem'] = (censo00AnosEstudo['1 a 3 anos'] / censo00AnosEstudo['Total']) * 100
censo00AnosEstudo['4a7AnosPorcentagem'] = (censo00AnosEstudo['4 a 7 anos'] / censo00AnosEstudo['Total']) * 100
censo00AnosEstudo['8a10AnosPorcentagem'] = (censo00AnosEstudo['8 a 10 anos'] / censo00AnosEstudo['Total']) * 100
censo00AnosEstudo['11a14AnosPorcentagem'] = (censo00AnosEstudo['11 a 14 anos'] / censo00AnosEstudo['Total']) * 100
censo00AnosEstudo['15AnosOuMaisPorcentagem'] = (censo00AnosEstudo['15 anos ou mais'] / censo00AnosEstudo['Total']) * 100

dropdownAnosEstudo = widgets.Dropdown(options=['Sem instrução e menos de 1 ano', '1 a 3 anos', '4 a 7 anos', '8 a 10 anos', '11 a 14 anos', '15 anos ou mais'], description="Anos de estudo:")

output = widgets.Output()

def busca_func(change):
    with output:
        clear_output()
        instrucao = dropdownAnosEstudo.value

        if instrucao == "Sem instrução e menos de 1 ano":
          mapaSI100 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
          folium.Choropleth(
              geo_data=br_estados,
              name="choropleth",
              data=censo00AnosEstudo,
              columns=["Unidade da Federação", "SemInstruçãoEmenosDe1AnoPorcentagem"],
              key_on="feature.properties.NM_UF",
              fill_color="Reds",
              fill_opacity=0.7,
              line_opacity=0.2,
              legend_name="População sem instrução e menos de 1 ano de estudo em 2000 (%)",
          ).add_to(mapaSI100)
          display(mapaSI100)
        elif instrucao == "1 a 3 anos":
          mapa1a300 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
          folium.Choropleth(
              geo_data=br_estados,
              name="choropleth",
              data=censo00AnosEstudo,
              columns=["Unidade da Federação", "1a3AnosPorcentagem"],
              key_on="feature.properties.NM_UF",
              fill_color="Reds",
              fill_opacity=0.7,
              line_opacity=0.2,
              legend_name="População com 1 a 3 anos de estudo em 2000 (%)",
          ).add_to(mapa1a300)
          display(mapa1a300)
        elif instrucao == "4 a 7 anos":
          mapa4a700 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
          folium.Choropleth(
              geo_data=br_estados,
              name="choropleth",
              data=censo00AnosEstudo,
              columns=["Unidade da Federação", "4a7AnosPorcentagem"],
              key_on="feature.properties.NM_UF",
              fill_color="Reds",
              fill_opacity=0.7,
              line_opacity=0.2,
              legend_name="População com 4 a 7 anos de estudo em 2000 (%)",
          ).add_to(mapa4a700)
          display(mapa4a700)
        elif instrucao == "8 a 10 anos":
          mapa8a1000 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
          folium.Choropleth(
              geo_data=br_estados,
              name="choropleth",
              data=censo00AnosEstudo,
              columns=["Unidade da Federação", "8a10AnosPorcentagem"],
              key_on="feature.properties.NM_UF",
              fill_color="Reds",
              fill_opacity=0.7,
              line_opacity=0.2,
              legend_name="População com 8 a 10 anos de estudo em 2000 (%)",
          ).add_to(mapa8a1000)
          display(mapa8a1000)
        elif instrucao == "11 a 14 anos":
          mapa11a1400 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
          folium.Choropleth(
              geo_data=br_estados,
              name="choropleth",
              data=censo00AnosEstudo,
              columns=["Unidade da Federação", "11a14AnosPorcentagem"],
              key_on="feature.properties.NM_UF",
              fill_color="Reds",
              fill_opacity=0.7,
              line_opacity=0.2,
              legend_name="População com 11 a 14 anos de estudo em 2000 (%)",
          ).add_to(mapa11a1400)
          display(mapa11a1400)
        elif instrucao == "15 anos ou mais":
          mapa15mais00 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
          folium.Choropleth(
              geo_data=br_estados,
              name="choropleth",
              data=censo00AnosEstudo,
              columns=["Unidade da Federação", "15AnosOuMaisPorcentagem"],
              key_on="feature.properties.NM_UF",
              fill_color="Reds",
              fill_opacity=0.7,
              line_opacity=0.2,
              legend_name="População com 15 anos ou mais de estudo em 2000 (%)",
          ).add_to(mapa15mais00)
          display(mapa15mais00)


dropdownAnosEstudo.observe(busca_func, names='value')

display(dropdownAnosEstudo)
display(output)

busca_func(None)

populaçãoTotal22 = censo22Genero[censo22Genero['Sexo'] == 'Total'][['Ano', 'Unidade da Federação', 'Total']].copy()
populaçãoTotal10 = censo10Genero[['Ano', 'Unidade da Federação', 'Total']].copy()
populaçãoTotal00 = censo00Genero[['Ano', 'Unidade da Federação', 'Total']].copy()

radio_ano = widgets.RadioButtons(options=['2000', '2010', '2022'], description='Ano:', disabled=False)

output = widgets.Output()

def busca_func(change):
    with output:
        clear_output()
        ano = radio_ano.value

        if ano == 2022:
          mapaPopulação22 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
          folium.Choropleth(
              geo_data=br_estados,
              name="choropleth",
              data=populaçãoTotal22,
              columns=["Unidade da Federação", "Total"],
              key_on="feature.properties.NM_UF",
              fill_color="Reds",
              fill_opacity=0.7,
              line_opacity=0.2,
              legend_name="População do Brasil em 2022",
          ).add_to(mapaPopulação22)
          display(mapaPopulação22)
        elif ano == 2010:
          mapaPopulação10 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
          folium.Choropleth(
              geo_data=br_estados,
              name="choropleth",
              data=populaçãoTotal10,
              columns=["Unidade da Federação", "Total"],
              key_on="feature.properties.NM_UF",
              fill_color="Reds",
              fill_opacity=0.7,
              line_opacity=0.2,
              legend_name="População do Brasil em 2010",
          ).add_to(mapaPopulação10)
          display(mapaPopulação10)
        elif ano == 2000:
          mapaPopulação00 = folium.Map(location=[-15.788497, -47.879873], zoom_start=4)
          folium.Choropleth(
              geo_data=br_estados,
              name="choropleth",
              data=populaçãoTotal00,
              columns=["Unidade da Federação", "Total"],
              key_on="feature.properties.NM_UF",
              fill_color="Reds",
              fill_opacity=0.7,
              line_opacity=0.2,
              legend_name="População do Brasil em 2000",
          ).add_to(mapaPopulação00)
          display(mapaPopulação00)


radio_ano.observe(busca_func, names='value')

display(radio_ano)
display(output)

busca_func(None)
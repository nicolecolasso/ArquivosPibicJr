# -*- coding: utf-8 -*-
"""GrauDeInstrução.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZJ9CoZS8DTlGg87tX3GP4HffNeWXlNbt
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

instrucao00vereador = pd.read_csv('instrucao00vereador.csv', sep= ';', encoding= 'latin1')
instrucao12vereador = pd.read_csv('instrucao12vereador.csv', sep= ';', encoding= 'latin1')
instrucao24vereador = pd.read_csv('instrucao24vereador.csv', sep= ';', encoding= 'latin1')
instrucao98senador = pd.read_csv('instrucao98senador.csv', sep= ';', encoding= 'latin1')
instrucao10senador = pd.read_csv('instrucao10senador.csv', sep= ';', encoding= 'latin1')
instrucao22senador = pd.read_csv('instrucao22senador.csv', sep= ';', encoding= 'latin1')
instrucao98depe = pd.read_csv('instrucao98depe.csv', sep= ';', encoding= 'latin1')
instrucao10depe = pd.read_csv('instrucao10depe.csv', sep= ';', encoding= 'latin1')
instrucao22depe = pd.read_csv('instrucao22depe.csv', sep= ';', encoding= 'latin1')
instrucao98depf = pd.read_csv('instrucao98depf.csv', sep= ';', encoding= 'latin1')
instrucao10depf = pd.read_csv('instrucao10depf.csv', sep= ';', encoding= 'latin1')
instrucao22depf = pd.read_csv('instrucao22depf.csv', sep= ';', encoding= 'latin1')

instrucao00vereador.insert(4, 'Ano', 2000)
instrucao12vereador.insert(4, 'Ano', 2012)
instrucao24vereador.insert(4, 'Ano', 2024)
instrucao98senador.insert(4, 'Ano', 1998)
instrucao10senador.insert(4, 'Ano', 2010)
instrucao22senador.insert(4, 'Ano', 2022)
instrucao98depe.insert(4, 'Ano', 1998)
instrucao10depe.insert(4, 'Ano', 2010)
instrucao22depe.insert(4, 'Ano', 2022)
instrucao98depf.insert(4, 'Ano', 1998)
instrucao10depf.insert(4, 'Ano', 2010)
instrucao22depf.insert(4, 'Ano', 2022)

vereador = pd.concat([instrucao00vereador, instrucao12vereador, instrucao24vereador])
senador = pd.concat([instrucao98senador, instrucao10senador, instrucao22senador])
depe = pd.concat([instrucao98depe, instrucao10depe, instrucao22depe])
depf = pd.concat([instrucao98depf, instrucao10depf, instrucao22depf])

vereador['Grau de instrução'] = vereador['Grau de instrução'].str.replace('1º grau completo', 'Ensino Fundamental completo')
vereador['Grau de instrução'] = vereador['Grau de instrução'].str.replace('1º grau incompleto', 'Ensino Fundamental incompleto')
vereador['Grau de instrução'] = vereador['Grau de instrução'].str.replace('2º grau completo', 'Ensino Médio completo')
vereador['Grau de instrução'] = vereador['Grau de instrução'].str.replace('2º grau incompleto', 'Ensino Médio incompleto')
senador['Grau de instrução'] = senador['Grau de instrução'].str.replace('1º grau completo', 'Ensino Fundamental completo')
senador['Grau de instrução'] = senador['Grau de instrução'].str.replace('1º grau incompleto', 'Ensino Fundamental incompleto')
senador['Grau de instrução'] = senador['Grau de instrução'].str.replace('2º grau completo', 'Ensino Médio completo')
senador['Grau de instrução'] = senador['Grau de instrução'].str.replace('2º grau incompleto', 'Ensino Médio incompleto')
depe['Grau de instrução'] = depe['Grau de instrução'].str.replace('1º grau completo', 'Ensino Fundamental completo')
depe['Grau de instrução'] = depe['Grau de instrução'].str.replace('1º grau incompleto', 'Ensino Fundamental incompleto')
depe['Grau de instrução'] = depe['Grau de instrução'].str.replace('2º grau completo', 'Ensino Médio completo')
depe['Grau de instrução'] = depe['Grau de instrução'].str.replace('2º grau incompleto', 'Ensino Médio incompleto')
depf['Grau de instrução'] = depf['Grau de instrução'].str.replace('1º grau completo', 'Ensino Fundamental completo')
depf['Grau de instrução'] = depf['Grau de instrução'].str.replace('1º grau incompleto', 'Ensino Fundamental incompleto')
depf['Grau de instrução'] = depf['Grau de instrução'].str.replace('2º grau completo', 'Ensino Médio completo')
depf['Grau de instrução'] = depf['Grau de instrução'].str.replace('2º grau incompleto', 'Ensino Médio incompleto')

vereador = vereador[vereador['Grau de instrução'] != 'Não informado']
senador = senador[senador['Grau de instrução'] != 'Não informado']
depe = depe[depe['Grau de instrução'] != 'Não informado']
depf = depf[depf['Grau de instrução'] != 'Não informado']
vereador = vereador[vereador['Grau de instrução'] != 'Não divulgável']
senador = senador[senador['Grau de instrução'] != 'Não divulgável']
depe = depe[depe['Grau de instrução'] != 'Não divulgável']
depf = depf[depf['Grau de instrução'] != 'Não divulgável']

sns.lineplot(data=vereador, x='Ano', y='Quantitativo', hue='Grau de instrução', markers=True).set(title='Grau de instrução de candidatos a vereadores (2000, 2012 e 2024)', xlabel='Ano', ylabel='Quantidade')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(range(2000, 2025, 12))

sns.lineplot(data=senador, x='Ano', y='Quantitativo', hue='Grau de instrução', markers=True).set(title='Grau de instrução de candidatos a senadores (1998, 2010 e 2022)', xlabel='Ano', ylabel='Quantidade')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(range(1998, 2023, 12))

sns.lineplot(data=depe, x='Ano', y='Quantitativo', hue='Grau de instrução', markers=True).set(title='Grau de instrução de candidatos a deputados estaduais (1998, 2010 e 2022)', xlabel='Ano', ylabel='Quantidade')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(range(1998, 2023, 12))

sns.lineplot(data=depf, x='Ano', y='Quantitativo', hue='Grau de instrução', markers=True).set(title='Grau de instrução de candidatos a deputados federais (1998, 2010 e 2022)', xlabel='Ano', ylabel='Quantidade')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(range(1998, 2023, 12))

bem_candidato_2006 = pd.read_csv('bem_candidato_2006_BRASIL.csv', sep= ';', encoding= 'latin1')
bem_candidato_2008 = pd.read_csv('bem_candidato_2008_BRASIL.csv', sep= ';', encoding= 'latin1')
bem_candidato_2010 = pd.read_csv('bem_candidato_2010_BRASIL.csv', sep= ';', encoding= 'latin1')
bem_candidato_2012 = pd.read_csv('bem_candidato_2012_BRASIL.csv', sep= ';', encoding= 'latin1')
bem_candidato_2014 = pd.read_csv('bem_candidato_2014_BRASIL.csv', sep= ';', encoding= 'latin1')
bem_candidato_2016 = pd.read_csv('bem_candidato_2016_BRASIL.csv', sep= ';', encoding= 'latin1')
bem_candidato_2018 = pd.read_csv('bem_candidato_2018_BRASIL.csv', sep= ';', encoding= 'latin1')
bem_candidato_2020 = pd.read_csv('bem_candidato_2020_BRASIL.csv', sep= ';', encoding= 'latin1')
bem_candidato_2022 = pd.read_csv('bem_candidato_2022_BRASIL.csv', sep= ';', encoding= 'latin1')
bem_candidato_2024 = pd.read_csv('bem_candidato_2024_BRASIL.csv', sep= ';', encoding= 'latin1')

bem_candidato_2006.insert(3, 'Ano', 2006)
bem_candidato_2008.insert(3, 'Ano', 2008)
bem_candidato_2010.insert(3, 'Ano', 2010)
bem_candidato_2012.insert(3, 'Ano', 2012)
bem_candidato_2014.insert(3, 'Ano', 2014)
bem_candidato_2016.insert(3, 'Ano', 2016)
bem_candidato_2018.insert(3, 'Ano', 2018)
bem_candidato_2020.insert(3, 'Ano', 2020)
bem_candidato_2022.insert(3, 'Ano', 2022)
bem_candidato_2024.insert(3, 'Ano', 2024)

bens = pd.concat([bem_candidato_2006, bem_candidato_2008, bem_candidato_2010, bem_candidato_2012, bem_candidato_2014, bem_candidato_2016, bem_candidato_2018, bem_candidato_2020, bem_candidato_2022, bem_candidato_2024])

bens['VR_BEM_CANDIDATO'] = bens['VR_BEM_CANDIDATO'].str.replace(',','.')
bens["VR_BEM_CANDIDATO"] = pd.to_numeric(bens["VR_BEM_CANDIDATO"], errors='coerce')

bens = bens.dropna(subset=['VR_BEM_CANDIDATO'])

def media(soma, total, ano):
  for index, row in bens.iterrows():
    if row['Ano'] == ano:
     soma = soma + row['VR_BEM_CANDIDATO']
     total = total + 1
  return soma/total

resultado1 = {}
soma06, total06 = 0, 0
resultado1[2006] = media(soma06, total06, 2006)

resultado2 = {}
soma08, total08 = 0, 0
resultado2[2008] = media(soma08, total08, 2008)

soma10, total10 = 0, 0
resultado1[2010] = media(soma10, total10, 2010)

soma12, total12 = 0, 0
resultado2[2012] = media(soma12, total12, 2012)

soma14, total14 = 0, 0
resultado1[2014] = media(soma14, total14, 2014)

soma16, total16 = 0, 0
resultado2[2016] = media(soma16, total16, 2016)

soma18, total18 = 0, 0
resultado1[2018] = media(soma18, total18, 2018)

soma20, total20 = 0, 0
resultado2[2020] = media(soma20, total20, 2020)

soma22, total22 = 0, 0
resultado1[2022] = media(soma22, total22, 2022)

soma24, total24 = 0, 0
resultado2[2024] = media(soma24, total24, 2024)

resultado1

resultado2

sns.lineplot(data=resultado1, x=resultado1.keys(), y=resultado1.values()).set(title='Média do valor dos bens de candidatos políticos ao longo dos anos', xlabel='Ano', ylabel='Valor em reais')
plt.xticks(rotation=45, ha='right')
plt.xticks(range(2006, 2023, 4))
plt.tight_layout()
plt.legend()

sns.lineplot(data=resultado2, x=resultado2.keys(), y=resultado2.values()).set(title='Média do valor dos bens de candidatos políticos ao longo dos anos (eleições munincipais)', xlabel='Ano', ylabel='Valor em reais')
plt.xticks(rotation=45, ha='right')
plt.xticks(range(2008, 2025, 4))
plt.tight_layout()

instrucao12eleit = pd.read_csv('instrucao12eleit.csv', sep= ';', encoding= 'latin1')
instrucao14eleit = pd.read_csv('instrucao14eleit.csv', sep= ';', encoding= 'latin1')
instrucao16eleit = pd.read_csv('instrucao16eleit.csv', sep= ';', encoding= 'latin1')
instrucao18eleit = pd.read_csv('instrucao18eleit.csv', sep= ';', encoding= 'latin1')
instrucao20eleit = pd.read_csv('instrucao20eleit.csv', sep= ';', encoding= 'latin1')
instrucao22eleit = pd.read_csv('instrucao22eleit.csv', sep= ';', encoding= 'latin1')
instrucao24eleit = pd.read_csv('instrucao24eleit.csv', sep= ';', encoding= 'latin1')

instrucao12eleit.insert(4, 'Ano', 2012)
instrucao14eleit.insert(4, 'Ano', 2014)
instrucao16eleit.insert(4, 'Ano', 2016)
instrucao18eleit.insert(4, 'Ano', 2018)
instrucao20eleit.insert(4, 'Ano', 2020)
instrucao22eleit.insert(4, 'Ano', 2022)
instrucao24eleit.insert(4, 'Ano', 2024)

eleitorado = pd.concat([instrucao12eleit, instrucao14eleit, instrucao16eleit, instrucao18eleit, instrucao20eleit, instrucao22eleit, instrucao24eleit])

eleitorado = eleitorado[eleitorado['Escolaridade'] != 'NÃO INFORMADO']

eleitorado

sns.lineplot(data=eleitorado, x='Ano', y='Eleitorado', hue='Escolaridade', markers=True).set(title='Grau de instrução do eleitorado (2012 a 2024)', xlabel='Ano', ylabel='Quantidade')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(range(2012, 2025, 2))

ipca = pd.read_csv('ipca_variacao.csv', sep= ';', encoding= 'latin1')
reeleição06 = pd.read_csv('reeleição06.csv', sep= ';', encoding= 'latin1')
reeleição08 = pd.read_csv('reeleição08.csv', sep= ';', encoding= 'latin1')
reeleição10 = pd.read_csv('reeleição10.csv', sep= ';', encoding= 'latin1')
reeleição12 = pd.read_csv('reeleição12.csv', sep= ';', encoding= 'latin1')
reeleição14 = pd.read_csv('reeleição14.csv', sep= ';', encoding= 'latin1')
reeleição16 = pd.read_csv('reeleição16.csv', sep= ';', encoding= 'latin1')
reeleição18 = pd.read_csv('reeleição18.csv', sep= ';', encoding= 'latin1')
reeleição20 = pd.read_csv('reeleição20.csv', sep= ';', encoding= 'latin1')
reeleição22 = pd.read_csv('reeleição22.csv', sep= ';', encoding= 'latin1')
reeleição24 = pd.read_csv('reeleição24.csv', sep= ';', encoding= 'latin1')

anos = [2006, 2008, 2012, 2010, 2016, 2014, 2018, 2020, 2022, 2024]
media_ano = {}

ipca = ipca.rename(columns={ipca.columns[0]: 'variacao_anual'})
ipca

ipca['variacao_anual'] = ipca['variacao_anual'].str.replace(',','.')
ipca['variacao_anual'] = pd.to_numeric(ipca['variacao_anual'], errors='coerce')

def media_ipca ():
  for x in anos:
    soma = 0
    cont = 0
    for index, row in ipca.iterrows():
      if x == row['ano']:
        soma = soma + row["variacao_anual"]
        cont = cont+1
    media_ano[x] = soma/cont

media_ipca()
print(media_ano)

sns.lineplot(data=media_ano, x=media_ano.keys(), y=media_ano.values()).set(title='Média do valor da inflação ao longo dos anos', xlabel='Ano', ylabel='Inflação')
plt.xticks(rotation=45, ha='right')
plt.xticks(range(2006, 2025, 2))
plt.tight_layout()
plt.legend()

sns.barplot(x=reeleição06['Sigla partido'], y=reeleição06['Quantitativo'], color='skyblue').set(title='Número de candidatos a reeleição por partido em 2006', xlabel='Sigla partido', ylabel='Quantitativo')
plt.figure(figsize=(10, 6))
plt.show()

sns.barplot(x=reeleição08['Sigla partido'], y=reeleição08['Quantitativo'], color='lightpink').set(title='Número de candidatos a reeleição por partido em 2008', xlabel='Sigla partido', ylabel='Quantitativo')
plt.figure(figsize=(10, 6))
plt.show()

sns.barplot(x=reeleição10['Sigla partido'], y=reeleição10['Quantitativo'], color='mediumpurple').set(title='Número de candidatos a reeleição por partido em 2010', xlabel='Sigla partido', ylabel='Quantitativo')
plt.figure(figsize=(10, 6))
plt.show()

sns.barplot(x=reeleição12['Sigla partido'], y=reeleição12['Quantitativo'], color='salmon').set(title='Número de candidatos a reeleição por partido em 2012', xlabel='Sigla partido', ylabel='Quantitativo')
plt.figure(figsize=(10, 6))
plt.show()

sns.barplot(x=reeleição14['Sigla partido'], y=reeleição14['Quantitativo'], color='silver').set(title='Número de candidatos a reeleição por partido em 2014', xlabel='Sigla partido', ylabel='Quantitativo')
plt.figure(figsize=(10, 6))
plt.show()

sns.barplot(x=reeleição16['Sigla partido'], y=reeleição16['Quantitativo'], color='yellow').set(title='Número de candidatos a reeleição por partido em 2016', xlabel='Sigla partido', ylabel='Quantitativo')
plt.figure(figsize=(10, 6))
plt.show()

sns.barplot(x=reeleição18['Sigla partido'], y=reeleição18['Quantitativo'], color='red').set(title='Número de candidatos a reeleição por partido em 2018', xlabel='Sigla partido', ylabel='Quantitativo')
plt.figure(figsize=(10, 6))
plt.show()

sns.barplot(x=reeleição20['Sigla partido'], y=reeleição20['Quantitativo'], color='midnightblue').set(title='Número de candidatos a reeleição por partido em 2020', xlabel='Sigla partido', ylabel='Quantitativo')
plt.figure(figsize=(10, 6))
plt.show()

sns.barplot(x=reeleição22['Sigla partido'], y=reeleição22['Quantitativo'], color='plum').set(title='Número de candidatos a reeleição por partido em 2022', xlabel='Sigla partido', ylabel='Quantitativo')
plt.figure(figsize=(10, 6))
plt.show()

sns.barplot(x=reeleição24['Sigla partido'], y=reeleição24['Quantitativo'], color='sienna').set(title='Número de candidatos a reeleição por partido em 2024', xlabel='Sigla partido', ylabel='Quantitativo')
plt.figure(figsize=(10, 6))
plt.show()